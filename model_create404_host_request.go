/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"fmt"
)

// checks if the Create404HostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Create404HostRequest{}

// Create404HostRequest struct for Create404HostRequest
type Create404HostRequest struct {
	// Domain Names separated by a comma
	DomainNames []string `json:"domain_names"`
	CertificateId *GetProxyHosts200ResponseInnerCertificateId `json:"certificate_id,omitempty"`
	// Is SSL Forced
	SslForced *bool `json:"ssl_forced,omitempty"`
	// Is HSTS Enabled
	HstsEnabled *bool `json:"hsts_enabled,omitempty"`
	// Is HSTS applicable to all subdomains
	HstsSubdomains *bool `json:"hsts_subdomains,omitempty"`
	// HTTP2 Protocol Support
	Http2Support *bool `json:"http2_support,omitempty"`
	AdvancedConfig *string `json:"advanced_config,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Create404HostRequest Create404HostRequest

// NewCreate404HostRequest instantiates a new Create404HostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreate404HostRequest(domainNames []string) *Create404HostRequest {
	this := Create404HostRequest{}
	this.DomainNames = domainNames
	return &this
}

// NewCreate404HostRequestWithDefaults instantiates a new Create404HostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreate404HostRequestWithDefaults() *Create404HostRequest {
	this := Create404HostRequest{}
	return &this
}

// GetDomainNames returns the DomainNames field value
func (o *Create404HostRequest) GetDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetDomainNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// SetDomainNames sets field value
func (o *Create404HostRequest) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetCertificateId returns the CertificateId field value if set, zero value otherwise.
func (o *Create404HostRequest) GetCertificateId() GetProxyHosts200ResponseInnerCertificateId {
	if o == nil || IsNil(o.CertificateId) {
		var ret GetProxyHosts200ResponseInnerCertificateId
		return ret
	}
	return *o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetCertificateIdOk() (*GetProxyHosts200ResponseInnerCertificateId, bool) {
	if o == nil || IsNil(o.CertificateId) {
		return nil, false
	}
	return o.CertificateId, true
}

// HasCertificateId returns a boolean if a field has been set.
func (o *Create404HostRequest) HasCertificateId() bool {
	if o != nil && !IsNil(o.CertificateId) {
		return true
	}

	return false
}

// SetCertificateId gets a reference to the given GetProxyHosts200ResponseInnerCertificateId and assigns it to the CertificateId field.
func (o *Create404HostRequest) SetCertificateId(v GetProxyHosts200ResponseInnerCertificateId) {
	o.CertificateId = &v
}

// GetSslForced returns the SslForced field value if set, zero value otherwise.
func (o *Create404HostRequest) GetSslForced() bool {
	if o == nil || IsNil(o.SslForced) {
		var ret bool
		return ret
	}
	return *o.SslForced
}

// GetSslForcedOk returns a tuple with the SslForced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetSslForcedOk() (*bool, bool) {
	if o == nil || IsNil(o.SslForced) {
		return nil, false
	}
	return o.SslForced, true
}

// HasSslForced returns a boolean if a field has been set.
func (o *Create404HostRequest) HasSslForced() bool {
	if o != nil && !IsNil(o.SslForced) {
		return true
	}

	return false
}

// SetSslForced gets a reference to the given bool and assigns it to the SslForced field.
func (o *Create404HostRequest) SetSslForced(v bool) {
	o.SslForced = &v
}

// GetHstsEnabled returns the HstsEnabled field value if set, zero value otherwise.
func (o *Create404HostRequest) GetHstsEnabled() bool {
	if o == nil || IsNil(o.HstsEnabled) {
		var ret bool
		return ret
	}
	return *o.HstsEnabled
}

// GetHstsEnabledOk returns a tuple with the HstsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetHstsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsEnabled) {
		return nil, false
	}
	return o.HstsEnabled, true
}

// HasHstsEnabled returns a boolean if a field has been set.
func (o *Create404HostRequest) HasHstsEnabled() bool {
	if o != nil && !IsNil(o.HstsEnabled) {
		return true
	}

	return false
}

// SetHstsEnabled gets a reference to the given bool and assigns it to the HstsEnabled field.
func (o *Create404HostRequest) SetHstsEnabled(v bool) {
	o.HstsEnabled = &v
}

// GetHstsSubdomains returns the HstsSubdomains field value if set, zero value otherwise.
func (o *Create404HostRequest) GetHstsSubdomains() bool {
	if o == nil || IsNil(o.HstsSubdomains) {
		var ret bool
		return ret
	}
	return *o.HstsSubdomains
}

// GetHstsSubdomainsOk returns a tuple with the HstsSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetHstsSubdomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsSubdomains) {
		return nil, false
	}
	return o.HstsSubdomains, true
}

// HasHstsSubdomains returns a boolean if a field has been set.
func (o *Create404HostRequest) HasHstsSubdomains() bool {
	if o != nil && !IsNil(o.HstsSubdomains) {
		return true
	}

	return false
}

// SetHstsSubdomains gets a reference to the given bool and assigns it to the HstsSubdomains field.
func (o *Create404HostRequest) SetHstsSubdomains(v bool) {
	o.HstsSubdomains = &v
}

// GetHttp2Support returns the Http2Support field value if set, zero value otherwise.
func (o *Create404HostRequest) GetHttp2Support() bool {
	if o == nil || IsNil(o.Http2Support) {
		var ret bool
		return ret
	}
	return *o.Http2Support
}

// GetHttp2SupportOk returns a tuple with the Http2Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetHttp2SupportOk() (*bool, bool) {
	if o == nil || IsNil(o.Http2Support) {
		return nil, false
	}
	return o.Http2Support, true
}

// HasHttp2Support returns a boolean if a field has been set.
func (o *Create404HostRequest) HasHttp2Support() bool {
	if o != nil && !IsNil(o.Http2Support) {
		return true
	}

	return false
}

// SetHttp2Support gets a reference to the given bool and assigns it to the Http2Support field.
func (o *Create404HostRequest) SetHttp2Support(v bool) {
	o.Http2Support = &v
}

// GetAdvancedConfig returns the AdvancedConfig field value if set, zero value otherwise.
func (o *Create404HostRequest) GetAdvancedConfig() string {
	if o == nil || IsNil(o.AdvancedConfig) {
		var ret string
		return ret
	}
	return *o.AdvancedConfig
}

// GetAdvancedConfigOk returns a tuple with the AdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetAdvancedConfigOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedConfig) {
		return nil, false
	}
	return o.AdvancedConfig, true
}

// HasAdvancedConfig returns a boolean if a field has been set.
func (o *Create404HostRequest) HasAdvancedConfig() bool {
	if o != nil && !IsNil(o.AdvancedConfig) {
		return true
	}

	return false
}

// SetAdvancedConfig gets a reference to the given string and assigns it to the AdvancedConfig field.
func (o *Create404HostRequest) SetAdvancedConfig(v string) {
	o.AdvancedConfig = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Create404HostRequest) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Create404HostRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Create404HostRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *Create404HostRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o Create404HostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Create404HostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain_names"] = o.DomainNames
	if !IsNil(o.CertificateId) {
		toSerialize["certificate_id"] = o.CertificateId
	}
	if !IsNil(o.SslForced) {
		toSerialize["ssl_forced"] = o.SslForced
	}
	if !IsNil(o.HstsEnabled) {
		toSerialize["hsts_enabled"] = o.HstsEnabled
	}
	if !IsNil(o.HstsSubdomains) {
		toSerialize["hsts_subdomains"] = o.HstsSubdomains
	}
	if !IsNil(o.Http2Support) {
		toSerialize["http2_support"] = o.Http2Support
	}
	if !IsNil(o.AdvancedConfig) {
		toSerialize["advanced_config"] = o.AdvancedConfig
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Create404HostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain_names",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreate404HostRequest := _Create404HostRequest{}

	err = json.Unmarshal(data, &varCreate404HostRequest)

	if err != nil {
		return err
	}

	*o = Create404HostRequest(varCreate404HostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain_names")
		delete(additionalProperties, "certificate_id")
		delete(additionalProperties, "ssl_forced")
		delete(additionalProperties, "hsts_enabled")
		delete(additionalProperties, "hsts_subdomains")
		delete(additionalProperties, "http2_support")
		delete(additionalProperties, "advanced_config")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreate404HostRequest struct {
	value *Create404HostRequest
	isSet bool
}

func (v NullableCreate404HostRequest) Get() *Create404HostRequest {
	return v.value
}

func (v *NullableCreate404HostRequest) Set(val *Create404HostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreate404HostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreate404HostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreate404HostRequest(val *Create404HostRequest) *NullableCreate404HostRequest {
	return &NullableCreate404HostRequest{value: val, isSet: true}
}

func (v NullableCreate404HostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreate404HostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


