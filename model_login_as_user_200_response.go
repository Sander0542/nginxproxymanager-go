/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"fmt"
)

// checks if the LoginAsUser200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginAsUser200Response{}

// LoginAsUser200Response Login object
type LoginAsUser200Response struct {
	// Token Expiry Unix Time
	Expires float32 `json:"expires"`
	// JWT Token
	Token string `json:"token"`
	User GetAccessLists200ResponseInnerOwner `json:"user"`
	AdditionalProperties map[string]interface{}
}

type _LoginAsUser200Response LoginAsUser200Response

// NewLoginAsUser200Response instantiates a new LoginAsUser200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginAsUser200Response(expires float32, token string, user GetAccessLists200ResponseInnerOwner) *LoginAsUser200Response {
	this := LoginAsUser200Response{}
	this.Expires = expires
	this.Token = token
	this.User = user
	return &this
}

// NewLoginAsUser200ResponseWithDefaults instantiates a new LoginAsUser200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginAsUser200ResponseWithDefaults() *LoginAsUser200Response {
	this := LoginAsUser200Response{}
	return &this
}

// GetExpires returns the Expires field value
func (o *LoginAsUser200Response) GetExpires() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value
// and a boolean to check if the value has been set.
func (o *LoginAsUser200Response) GetExpiresOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expires, true
}

// SetExpires sets field value
func (o *LoginAsUser200Response) SetExpires(v float32) {
	o.Expires = v
}

// GetToken returns the Token field value
func (o *LoginAsUser200Response) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *LoginAsUser200Response) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *LoginAsUser200Response) SetToken(v string) {
	o.Token = v
}

// GetUser returns the User field value
func (o *LoginAsUser200Response) GetUser() GetAccessLists200ResponseInnerOwner {
	if o == nil {
		var ret GetAccessLists200ResponseInnerOwner
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *LoginAsUser200Response) GetUserOk() (*GetAccessLists200ResponseInnerOwner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *LoginAsUser200Response) SetUser(v GetAccessLists200ResponseInnerOwner) {
	o.User = v
}

func (o LoginAsUser200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginAsUser200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expires"] = o.Expires
	toSerialize["token"] = o.Token
	toSerialize["user"] = o.User

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LoginAsUser200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expires",
		"token",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginAsUser200Response := _LoginAsUser200Response{}

	err = json.Unmarshal(data, &varLoginAsUser200Response)

	if err != nil {
		return err
	}

	*o = LoginAsUser200Response(varLoginAsUser200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "expires")
		delete(additionalProperties, "token")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoginAsUser200Response struct {
	value *LoginAsUser200Response
	isSet bool
}

func (v NullableLoginAsUser200Response) Get() *LoginAsUser200Response {
	return v.value
}

func (v *NullableLoginAsUser200Response) Set(val *LoginAsUser200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginAsUser200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginAsUser200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginAsUser200Response(val *LoginAsUser200Response) *NullableLoginAsUser200Response {
	return &NullableLoginAsUser200Response{value: val, isSet: true}
}

func (v NullableLoginAsUser200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginAsUser200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


