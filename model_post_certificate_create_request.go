/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.x.x
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostCertificateCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCertificateCreateRequest{}

// PostCertificateCreateRequest struct for PostCertificateCreateRequest
type PostCertificateCreateRequest struct {
	Provider string `json:"provider" validate:"regexp=^(letsencrypt|other)$"`
	// Nice Name for the custom certificate
	NiceName *string `json:"nice_name,omitempty"`
	// Domain Names separated by a comma
	DomainNames []string `json:"domain_names,omitempty"`
	Meta *PostCertificateCreateRequestMeta `json:"meta,omitempty"`
}

type _PostCertificateCreateRequest PostCertificateCreateRequest

// NewPostCertificateCreateRequest instantiates a new PostCertificateCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCertificateCreateRequest(provider string) *PostCertificateCreateRequest {
	this := PostCertificateCreateRequest{}
	this.Provider = provider
	return &this
}

// NewPostCertificateCreateRequestWithDefaults instantiates a new PostCertificateCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCertificateCreateRequestWithDefaults() *PostCertificateCreateRequest {
	this := PostCertificateCreateRequest{}
	return &this
}

// GetProvider returns the Provider field value
func (o *PostCertificateCreateRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *PostCertificateCreateRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *PostCertificateCreateRequest) SetProvider(v string) {
	o.Provider = v
}

// GetNiceName returns the NiceName field value if set, zero value otherwise.
func (o *PostCertificateCreateRequest) GetNiceName() string {
	if o == nil || IsNil(o.NiceName) {
		var ret string
		return ret
	}
	return *o.NiceName
}

// GetNiceNameOk returns a tuple with the NiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCertificateCreateRequest) GetNiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.NiceName) {
		return nil, false
	}
	return o.NiceName, true
}

// HasNiceName returns a boolean if a field has been set.
func (o *PostCertificateCreateRequest) HasNiceName() bool {
	if o != nil && !IsNil(o.NiceName) {
		return true
	}

	return false
}

// SetNiceName gets a reference to the given string and assigns it to the NiceName field.
func (o *PostCertificateCreateRequest) SetNiceName(v string) {
	o.NiceName = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *PostCertificateCreateRequest) GetDomainNames() []string {
	if o == nil || IsNil(o.DomainNames) {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCertificateCreateRequest) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *PostCertificateCreateRequest) HasDomainNames() bool {
	if o != nil && !IsNil(o.DomainNames) {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *PostCertificateCreateRequest) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *PostCertificateCreateRequest) GetMeta() PostCertificateCreateRequestMeta {
	if o == nil || IsNil(o.Meta) {
		var ret PostCertificateCreateRequestMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCertificateCreateRequest) GetMetaOk() (*PostCertificateCreateRequestMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *PostCertificateCreateRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given PostCertificateCreateRequestMeta and assigns it to the Meta field.
func (o *PostCertificateCreateRequest) SetMeta(v PostCertificateCreateRequestMeta) {
	o.Meta = &v
}

func (o PostCertificateCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCertificateCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	if !IsNil(o.NiceName) {
		toSerialize["nice_name"] = o.NiceName
	}
	if !IsNil(o.DomainNames) {
		toSerialize["domain_names"] = o.DomainNames
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

func (o *PostCertificateCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostCertificateCreateRequest := _PostCertificateCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostCertificateCreateRequest)

	if err != nil {
		return err
	}

	*o = PostCertificateCreateRequest(varPostCertificateCreateRequest)

	return err
}

type NullablePostCertificateCreateRequest struct {
	value *PostCertificateCreateRequest
	isSet bool
}

func (v NullablePostCertificateCreateRequest) Get() *PostCertificateCreateRequest {
	return v.value
}

func (v *NullablePostCertificateCreateRequest) Set(val *PostCertificateCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCertificateCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCertificateCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCertificateCreateRequest(val *PostCertificateCreateRequest) *NullablePostCertificateCreateRequest {
	return &NullablePostCertificateCreateRequest{value: val, isSet: true}
}

func (v NullablePostCertificateCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCertificateCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


