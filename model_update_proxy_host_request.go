/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
)

// checks if the UpdateProxyHostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProxyHostRequest{}

// UpdateProxyHostRequest struct for UpdateProxyHostRequest
type UpdateProxyHostRequest struct {
	// Domain Names separated by a comma
	DomainNames []string `json:"domain_names,omitempty"`
	ForwardScheme *string `json:"forward_scheme,omitempty"`
	ForwardHost *string `json:"forward_host,omitempty"`
	ForwardPort *int64 `json:"forward_port,omitempty"`
	CertificateId *GetProxyHosts200ResponseInnerCertificateId `json:"certificate_id,omitempty"`
	// Is SSL Forced
	SslForced *bool `json:"ssl_forced,omitempty"`
	// Is HSTS Enabled
	HstsEnabled *bool `json:"hsts_enabled,omitempty"`
	// Is HSTS applicable to all subdomains
	HstsSubdomains *bool `json:"hsts_subdomains,omitempty"`
	// HTTP2 Protocol Support
	Http2Support *bool `json:"http2_support,omitempty"`
	// Should we block common exploits
	BlockExploits *bool `json:"block_exploits,omitempty"`
	// Should we cache assets
	CachingEnabled *bool `json:"caching_enabled,omitempty"`
	// Allow Websocket Upgrade for all paths
	AllowWebsocketUpgrade *bool `json:"allow_websocket_upgrade,omitempty"`
	// Access List ID
	AccessListId *int64 `json:"access_list_id,omitempty"`
	AdvancedConfig *string `json:"advanced_config,omitempty"`
	// Is Enabled
	Enabled *bool `json:"enabled,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	Locations []GetProxyHosts200ResponseInnerLocationsInner `json:"locations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateProxyHostRequest UpdateProxyHostRequest

// NewUpdateProxyHostRequest instantiates a new UpdateProxyHostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProxyHostRequest() *UpdateProxyHostRequest {
	this := UpdateProxyHostRequest{}
	return &this
}

// NewUpdateProxyHostRequestWithDefaults instantiates a new UpdateProxyHostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProxyHostRequestWithDefaults() *UpdateProxyHostRequest {
	this := UpdateProxyHostRequest{}
	return &this
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetDomainNames() []string {
	if o == nil || IsNil(o.DomainNames) {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasDomainNames() bool {
	if o != nil && !IsNil(o.DomainNames) {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *UpdateProxyHostRequest) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetForwardScheme returns the ForwardScheme field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetForwardScheme() string {
	if o == nil || IsNil(o.ForwardScheme) {
		var ret string
		return ret
	}
	return *o.ForwardScheme
}

// GetForwardSchemeOk returns a tuple with the ForwardScheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetForwardSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardScheme) {
		return nil, false
	}
	return o.ForwardScheme, true
}

// HasForwardScheme returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasForwardScheme() bool {
	if o != nil && !IsNil(o.ForwardScheme) {
		return true
	}

	return false
}

// SetForwardScheme gets a reference to the given string and assigns it to the ForwardScheme field.
func (o *UpdateProxyHostRequest) SetForwardScheme(v string) {
	o.ForwardScheme = &v
}

// GetForwardHost returns the ForwardHost field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetForwardHost() string {
	if o == nil || IsNil(o.ForwardHost) {
		var ret string
		return ret
	}
	return *o.ForwardHost
}

// GetForwardHostOk returns a tuple with the ForwardHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetForwardHostOk() (*string, bool) {
	if o == nil || IsNil(o.ForwardHost) {
		return nil, false
	}
	return o.ForwardHost, true
}

// HasForwardHost returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasForwardHost() bool {
	if o != nil && !IsNil(o.ForwardHost) {
		return true
	}

	return false
}

// SetForwardHost gets a reference to the given string and assigns it to the ForwardHost field.
func (o *UpdateProxyHostRequest) SetForwardHost(v string) {
	o.ForwardHost = &v
}

// GetForwardPort returns the ForwardPort field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetForwardPort() int64 {
	if o == nil || IsNil(o.ForwardPort) {
		var ret int64
		return ret
	}
	return *o.ForwardPort
}

// GetForwardPortOk returns a tuple with the ForwardPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetForwardPortOk() (*int64, bool) {
	if o == nil || IsNil(o.ForwardPort) {
		return nil, false
	}
	return o.ForwardPort, true
}

// HasForwardPort returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasForwardPort() bool {
	if o != nil && !IsNil(o.ForwardPort) {
		return true
	}

	return false
}

// SetForwardPort gets a reference to the given int64 and assigns it to the ForwardPort field.
func (o *UpdateProxyHostRequest) SetForwardPort(v int64) {
	o.ForwardPort = &v
}

// GetCertificateId returns the CertificateId field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetCertificateId() GetProxyHosts200ResponseInnerCertificateId {
	if o == nil || IsNil(o.CertificateId) {
		var ret GetProxyHosts200ResponseInnerCertificateId
		return ret
	}
	return *o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetCertificateIdOk() (*GetProxyHosts200ResponseInnerCertificateId, bool) {
	if o == nil || IsNil(o.CertificateId) {
		return nil, false
	}
	return o.CertificateId, true
}

// HasCertificateId returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasCertificateId() bool {
	if o != nil && !IsNil(o.CertificateId) {
		return true
	}

	return false
}

// SetCertificateId gets a reference to the given GetProxyHosts200ResponseInnerCertificateId and assigns it to the CertificateId field.
func (o *UpdateProxyHostRequest) SetCertificateId(v GetProxyHosts200ResponseInnerCertificateId) {
	o.CertificateId = &v
}

// GetSslForced returns the SslForced field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetSslForced() bool {
	if o == nil || IsNil(o.SslForced) {
		var ret bool
		return ret
	}
	return *o.SslForced
}

// GetSslForcedOk returns a tuple with the SslForced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetSslForcedOk() (*bool, bool) {
	if o == nil || IsNil(o.SslForced) {
		return nil, false
	}
	return o.SslForced, true
}

// HasSslForced returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasSslForced() bool {
	if o != nil && !IsNil(o.SslForced) {
		return true
	}

	return false
}

// SetSslForced gets a reference to the given bool and assigns it to the SslForced field.
func (o *UpdateProxyHostRequest) SetSslForced(v bool) {
	o.SslForced = &v
}

// GetHstsEnabled returns the HstsEnabled field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetHstsEnabled() bool {
	if o == nil || IsNil(o.HstsEnabled) {
		var ret bool
		return ret
	}
	return *o.HstsEnabled
}

// GetHstsEnabledOk returns a tuple with the HstsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetHstsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsEnabled) {
		return nil, false
	}
	return o.HstsEnabled, true
}

// HasHstsEnabled returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasHstsEnabled() bool {
	if o != nil && !IsNil(o.HstsEnabled) {
		return true
	}

	return false
}

// SetHstsEnabled gets a reference to the given bool and assigns it to the HstsEnabled field.
func (o *UpdateProxyHostRequest) SetHstsEnabled(v bool) {
	o.HstsEnabled = &v
}

// GetHstsSubdomains returns the HstsSubdomains field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetHstsSubdomains() bool {
	if o == nil || IsNil(o.HstsSubdomains) {
		var ret bool
		return ret
	}
	return *o.HstsSubdomains
}

// GetHstsSubdomainsOk returns a tuple with the HstsSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetHstsSubdomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsSubdomains) {
		return nil, false
	}
	return o.HstsSubdomains, true
}

// HasHstsSubdomains returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasHstsSubdomains() bool {
	if o != nil && !IsNil(o.HstsSubdomains) {
		return true
	}

	return false
}

// SetHstsSubdomains gets a reference to the given bool and assigns it to the HstsSubdomains field.
func (o *UpdateProxyHostRequest) SetHstsSubdomains(v bool) {
	o.HstsSubdomains = &v
}

// GetHttp2Support returns the Http2Support field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetHttp2Support() bool {
	if o == nil || IsNil(o.Http2Support) {
		var ret bool
		return ret
	}
	return *o.Http2Support
}

// GetHttp2SupportOk returns a tuple with the Http2Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetHttp2SupportOk() (*bool, bool) {
	if o == nil || IsNil(o.Http2Support) {
		return nil, false
	}
	return o.Http2Support, true
}

// HasHttp2Support returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasHttp2Support() bool {
	if o != nil && !IsNil(o.Http2Support) {
		return true
	}

	return false
}

// SetHttp2Support gets a reference to the given bool and assigns it to the Http2Support field.
func (o *UpdateProxyHostRequest) SetHttp2Support(v bool) {
	o.Http2Support = &v
}

// GetBlockExploits returns the BlockExploits field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetBlockExploits() bool {
	if o == nil || IsNil(o.BlockExploits) {
		var ret bool
		return ret
	}
	return *o.BlockExploits
}

// GetBlockExploitsOk returns a tuple with the BlockExploits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetBlockExploitsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockExploits) {
		return nil, false
	}
	return o.BlockExploits, true
}

// HasBlockExploits returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasBlockExploits() bool {
	if o != nil && !IsNil(o.BlockExploits) {
		return true
	}

	return false
}

// SetBlockExploits gets a reference to the given bool and assigns it to the BlockExploits field.
func (o *UpdateProxyHostRequest) SetBlockExploits(v bool) {
	o.BlockExploits = &v
}

// GetCachingEnabled returns the CachingEnabled field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetCachingEnabled() bool {
	if o == nil || IsNil(o.CachingEnabled) {
		var ret bool
		return ret
	}
	return *o.CachingEnabled
}

// GetCachingEnabledOk returns a tuple with the CachingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetCachingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CachingEnabled) {
		return nil, false
	}
	return o.CachingEnabled, true
}

// HasCachingEnabled returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasCachingEnabled() bool {
	if o != nil && !IsNil(o.CachingEnabled) {
		return true
	}

	return false
}

// SetCachingEnabled gets a reference to the given bool and assigns it to the CachingEnabled field.
func (o *UpdateProxyHostRequest) SetCachingEnabled(v bool) {
	o.CachingEnabled = &v
}

// GetAllowWebsocketUpgrade returns the AllowWebsocketUpgrade field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetAllowWebsocketUpgrade() bool {
	if o == nil || IsNil(o.AllowWebsocketUpgrade) {
		var ret bool
		return ret
	}
	return *o.AllowWebsocketUpgrade
}

// GetAllowWebsocketUpgradeOk returns a tuple with the AllowWebsocketUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetAllowWebsocketUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowWebsocketUpgrade) {
		return nil, false
	}
	return o.AllowWebsocketUpgrade, true
}

// HasAllowWebsocketUpgrade returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasAllowWebsocketUpgrade() bool {
	if o != nil && !IsNil(o.AllowWebsocketUpgrade) {
		return true
	}

	return false
}

// SetAllowWebsocketUpgrade gets a reference to the given bool and assigns it to the AllowWebsocketUpgrade field.
func (o *UpdateProxyHostRequest) SetAllowWebsocketUpgrade(v bool) {
	o.AllowWebsocketUpgrade = &v
}

// GetAccessListId returns the AccessListId field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetAccessListId() int64 {
	if o == nil || IsNil(o.AccessListId) {
		var ret int64
		return ret
	}
	return *o.AccessListId
}

// GetAccessListIdOk returns a tuple with the AccessListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetAccessListIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccessListId) {
		return nil, false
	}
	return o.AccessListId, true
}

// HasAccessListId returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasAccessListId() bool {
	if o != nil && !IsNil(o.AccessListId) {
		return true
	}

	return false
}

// SetAccessListId gets a reference to the given int64 and assigns it to the AccessListId field.
func (o *UpdateProxyHostRequest) SetAccessListId(v int64) {
	o.AccessListId = &v
}

// GetAdvancedConfig returns the AdvancedConfig field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetAdvancedConfig() string {
	if o == nil || IsNil(o.AdvancedConfig) {
		var ret string
		return ret
	}
	return *o.AdvancedConfig
}

// GetAdvancedConfigOk returns a tuple with the AdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetAdvancedConfigOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedConfig) {
		return nil, false
	}
	return o.AdvancedConfig, true
}

// HasAdvancedConfig returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasAdvancedConfig() bool {
	if o != nil && !IsNil(o.AdvancedConfig) {
		return true
	}

	return false
}

// SetAdvancedConfig gets a reference to the given string and assigns it to the AdvancedConfig field.
func (o *UpdateProxyHostRequest) SetAdvancedConfig(v string) {
	o.AdvancedConfig = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateProxyHostRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *UpdateProxyHostRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *UpdateProxyHostRequest) GetLocations() []GetProxyHosts200ResponseInnerLocationsInner {
	if o == nil || IsNil(o.Locations) {
		var ret []GetProxyHosts200ResponseInnerLocationsInner
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProxyHostRequest) GetLocationsOk() ([]GetProxyHosts200ResponseInnerLocationsInner, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *UpdateProxyHostRequest) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []GetProxyHosts200ResponseInnerLocationsInner and assigns it to the Locations field.
func (o *UpdateProxyHostRequest) SetLocations(v []GetProxyHosts200ResponseInnerLocationsInner) {
	o.Locations = v
}

func (o UpdateProxyHostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProxyHostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainNames) {
		toSerialize["domain_names"] = o.DomainNames
	}
	if !IsNil(o.ForwardScheme) {
		toSerialize["forward_scheme"] = o.ForwardScheme
	}
	if !IsNil(o.ForwardHost) {
		toSerialize["forward_host"] = o.ForwardHost
	}
	if !IsNil(o.ForwardPort) {
		toSerialize["forward_port"] = o.ForwardPort
	}
	if !IsNil(o.CertificateId) {
		toSerialize["certificate_id"] = o.CertificateId
	}
	if !IsNil(o.SslForced) {
		toSerialize["ssl_forced"] = o.SslForced
	}
	if !IsNil(o.HstsEnabled) {
		toSerialize["hsts_enabled"] = o.HstsEnabled
	}
	if !IsNil(o.HstsSubdomains) {
		toSerialize["hsts_subdomains"] = o.HstsSubdomains
	}
	if !IsNil(o.Http2Support) {
		toSerialize["http2_support"] = o.Http2Support
	}
	if !IsNil(o.BlockExploits) {
		toSerialize["block_exploits"] = o.BlockExploits
	}
	if !IsNil(o.CachingEnabled) {
		toSerialize["caching_enabled"] = o.CachingEnabled
	}
	if !IsNil(o.AllowWebsocketUpgrade) {
		toSerialize["allow_websocket_upgrade"] = o.AllowWebsocketUpgrade
	}
	if !IsNil(o.AccessListId) {
		toSerialize["access_list_id"] = o.AccessListId
	}
	if !IsNil(o.AdvancedConfig) {
		toSerialize["advanced_config"] = o.AdvancedConfig
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateProxyHostRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateProxyHostRequest := _UpdateProxyHostRequest{}

	err = json.Unmarshal(data, &varUpdateProxyHostRequest)

	if err != nil {
		return err
	}

	*o = UpdateProxyHostRequest(varUpdateProxyHostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain_names")
		delete(additionalProperties, "forward_scheme")
		delete(additionalProperties, "forward_host")
		delete(additionalProperties, "forward_port")
		delete(additionalProperties, "certificate_id")
		delete(additionalProperties, "ssl_forced")
		delete(additionalProperties, "hsts_enabled")
		delete(additionalProperties, "hsts_subdomains")
		delete(additionalProperties, "http2_support")
		delete(additionalProperties, "block_exploits")
		delete(additionalProperties, "caching_enabled")
		delete(additionalProperties, "allow_websocket_upgrade")
		delete(additionalProperties, "access_list_id")
		delete(additionalProperties, "advanced_config")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "locations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateProxyHostRequest struct {
	value *UpdateProxyHostRequest
	isSet bool
}

func (v NullableUpdateProxyHostRequest) Get() *UpdateProxyHostRequest {
	return v.value
}

func (v *NullableUpdateProxyHostRequest) Set(val *UpdateProxyHostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProxyHostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProxyHostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProxyHostRequest(val *UpdateProxyHostRequest) *NullableUpdateProxyHostRequest {
	return &NullableUpdateProxyHostRequest{value: val, isSet: true}
}

func (v NullableUpdateProxyHostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProxyHostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


