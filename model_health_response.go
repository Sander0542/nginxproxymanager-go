/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.x.x
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HealthResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthResponse{}

// HealthResponse Health object
type HealthResponse struct {
	// Healthy
	Status string `json:"status"`
	Version HealthResponseVersion `json:"version"`
}

type _HealthResponse HealthResponse

// NewHealthResponse instantiates a new HealthResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthResponse(status string, version HealthResponseVersion) *HealthResponse {
	this := HealthResponse{}
	this.Status = status
	this.Version = version
	return &this
}

// NewHealthResponseWithDefaults instantiates a new HealthResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthResponseWithDefaults() *HealthResponse {
	this := HealthResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *HealthResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HealthResponse) SetStatus(v string) {
	o.Status = v
}

// GetVersion returns the Version field value
func (o *HealthResponse) GetVersion() HealthResponseVersion {
	if o == nil {
		var ret HealthResponseVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HealthResponse) GetVersionOk() (*HealthResponseVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HealthResponse) SetVersion(v HealthResponseVersion) {
	o.Version = v
}

func (o HealthResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *HealthResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthResponse := _HealthResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHealthResponse)

	if err != nil {
		return err
	}

	*o = HealthResponse(varHealthResponse)

	return err
}

type NullableHealthResponse struct {
	value *HealthResponse
	isSet bool
}

func (v NullableHealthResponse) Get() *HealthResponse {
	return v.value
}

func (v *NullableHealthResponse) Set(val *HealthResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthResponse(val *HealthResponse) *NullableHealthResponse {
	return &NullableHealthResponse{value: val, isSet: true}
}

func (v NullableHealthResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


