/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRedirectionHostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRedirectionHostRequest{}

// CreateRedirectionHostRequest struct for CreateRedirectionHostRequest
type CreateRedirectionHostRequest struct {
	// Domain Names separated by a comma
	DomainNames []string `json:"domain_names"`
	// Redirect HTTP Status Code
	ForwardHttpCode int64 `json:"forward_http_code"`
	ForwardScheme string `json:"forward_scheme"`
	// Domain Name
	ForwardDomainName string `json:"forward_domain_name" validate:"regexp=^(?:[^.*]+\\\\.?)+[^.]$"`
	// Should the path be preserved
	PreservePath *bool `json:"preserve_path,omitempty"`
	CertificateId *GetProxyHosts200ResponseInnerCertificateId `json:"certificate_id,omitempty"`
	// Is SSL Forced
	SslForced *bool `json:"ssl_forced,omitempty"`
	// Is HSTS Enabled
	HstsEnabled *bool `json:"hsts_enabled,omitempty"`
	// Is HSTS applicable to all subdomains
	HstsSubdomains *bool `json:"hsts_subdomains,omitempty"`
	// HTTP2 Protocol Support
	Http2Support *bool `json:"http2_support,omitempty"`
	// Should we block common exploits
	BlockExploits *bool `json:"block_exploits,omitempty"`
	AdvancedConfig *string `json:"advanced_config,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateRedirectionHostRequest CreateRedirectionHostRequest

// NewCreateRedirectionHostRequest instantiates a new CreateRedirectionHostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRedirectionHostRequest(domainNames []string, forwardHttpCode int64, forwardScheme string, forwardDomainName string) *CreateRedirectionHostRequest {
	this := CreateRedirectionHostRequest{}
	this.DomainNames = domainNames
	this.ForwardHttpCode = forwardHttpCode
	this.ForwardScheme = forwardScheme
	this.ForwardDomainName = forwardDomainName
	return &this
}

// NewCreateRedirectionHostRequestWithDefaults instantiates a new CreateRedirectionHostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRedirectionHostRequestWithDefaults() *CreateRedirectionHostRequest {
	this := CreateRedirectionHostRequest{}
	return &this
}

// GetDomainNames returns the DomainNames field value
func (o *CreateRedirectionHostRequest) GetDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetDomainNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// SetDomainNames sets field value
func (o *CreateRedirectionHostRequest) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetForwardHttpCode returns the ForwardHttpCode field value
func (o *CreateRedirectionHostRequest) GetForwardHttpCode() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ForwardHttpCode
}

// GetForwardHttpCodeOk returns a tuple with the ForwardHttpCode field value
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetForwardHttpCodeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardHttpCode, true
}

// SetForwardHttpCode sets field value
func (o *CreateRedirectionHostRequest) SetForwardHttpCode(v int64) {
	o.ForwardHttpCode = v
}

// GetForwardScheme returns the ForwardScheme field value
func (o *CreateRedirectionHostRequest) GetForwardScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForwardScheme
}

// GetForwardSchemeOk returns a tuple with the ForwardScheme field value
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetForwardSchemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardScheme, true
}

// SetForwardScheme sets field value
func (o *CreateRedirectionHostRequest) SetForwardScheme(v string) {
	o.ForwardScheme = v
}

// GetForwardDomainName returns the ForwardDomainName field value
func (o *CreateRedirectionHostRequest) GetForwardDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForwardDomainName
}

// GetForwardDomainNameOk returns a tuple with the ForwardDomainName field value
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetForwardDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardDomainName, true
}

// SetForwardDomainName sets field value
func (o *CreateRedirectionHostRequest) SetForwardDomainName(v string) {
	o.ForwardDomainName = v
}

// GetPreservePath returns the PreservePath field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetPreservePath() bool {
	if o == nil || IsNil(o.PreservePath) {
		var ret bool
		return ret
	}
	return *o.PreservePath
}

// GetPreservePathOk returns a tuple with the PreservePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetPreservePathOk() (*bool, bool) {
	if o == nil || IsNil(o.PreservePath) {
		return nil, false
	}
	return o.PreservePath, true
}

// HasPreservePath returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasPreservePath() bool {
	if o != nil && !IsNil(o.PreservePath) {
		return true
	}

	return false
}

// SetPreservePath gets a reference to the given bool and assigns it to the PreservePath field.
func (o *CreateRedirectionHostRequest) SetPreservePath(v bool) {
	o.PreservePath = &v
}

// GetCertificateId returns the CertificateId field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetCertificateId() GetProxyHosts200ResponseInnerCertificateId {
	if o == nil || IsNil(o.CertificateId) {
		var ret GetProxyHosts200ResponseInnerCertificateId
		return ret
	}
	return *o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetCertificateIdOk() (*GetProxyHosts200ResponseInnerCertificateId, bool) {
	if o == nil || IsNil(o.CertificateId) {
		return nil, false
	}
	return o.CertificateId, true
}

// HasCertificateId returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasCertificateId() bool {
	if o != nil && !IsNil(o.CertificateId) {
		return true
	}

	return false
}

// SetCertificateId gets a reference to the given GetProxyHosts200ResponseInnerCertificateId and assigns it to the CertificateId field.
func (o *CreateRedirectionHostRequest) SetCertificateId(v GetProxyHosts200ResponseInnerCertificateId) {
	o.CertificateId = &v
}

// GetSslForced returns the SslForced field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetSslForced() bool {
	if o == nil || IsNil(o.SslForced) {
		var ret bool
		return ret
	}
	return *o.SslForced
}

// GetSslForcedOk returns a tuple with the SslForced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetSslForcedOk() (*bool, bool) {
	if o == nil || IsNil(o.SslForced) {
		return nil, false
	}
	return o.SslForced, true
}

// HasSslForced returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasSslForced() bool {
	if o != nil && !IsNil(o.SslForced) {
		return true
	}

	return false
}

// SetSslForced gets a reference to the given bool and assigns it to the SslForced field.
func (o *CreateRedirectionHostRequest) SetSslForced(v bool) {
	o.SslForced = &v
}

// GetHstsEnabled returns the HstsEnabled field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetHstsEnabled() bool {
	if o == nil || IsNil(o.HstsEnabled) {
		var ret bool
		return ret
	}
	return *o.HstsEnabled
}

// GetHstsEnabledOk returns a tuple with the HstsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetHstsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsEnabled) {
		return nil, false
	}
	return o.HstsEnabled, true
}

// HasHstsEnabled returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasHstsEnabled() bool {
	if o != nil && !IsNil(o.HstsEnabled) {
		return true
	}

	return false
}

// SetHstsEnabled gets a reference to the given bool and assigns it to the HstsEnabled field.
func (o *CreateRedirectionHostRequest) SetHstsEnabled(v bool) {
	o.HstsEnabled = &v
}

// GetHstsSubdomains returns the HstsSubdomains field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetHstsSubdomains() bool {
	if o == nil || IsNil(o.HstsSubdomains) {
		var ret bool
		return ret
	}
	return *o.HstsSubdomains
}

// GetHstsSubdomainsOk returns a tuple with the HstsSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetHstsSubdomainsOk() (*bool, bool) {
	if o == nil || IsNil(o.HstsSubdomains) {
		return nil, false
	}
	return o.HstsSubdomains, true
}

// HasHstsSubdomains returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasHstsSubdomains() bool {
	if o != nil && !IsNil(o.HstsSubdomains) {
		return true
	}

	return false
}

// SetHstsSubdomains gets a reference to the given bool and assigns it to the HstsSubdomains field.
func (o *CreateRedirectionHostRequest) SetHstsSubdomains(v bool) {
	o.HstsSubdomains = &v
}

// GetHttp2Support returns the Http2Support field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetHttp2Support() bool {
	if o == nil || IsNil(o.Http2Support) {
		var ret bool
		return ret
	}
	return *o.Http2Support
}

// GetHttp2SupportOk returns a tuple with the Http2Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetHttp2SupportOk() (*bool, bool) {
	if o == nil || IsNil(o.Http2Support) {
		return nil, false
	}
	return o.Http2Support, true
}

// HasHttp2Support returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasHttp2Support() bool {
	if o != nil && !IsNil(o.Http2Support) {
		return true
	}

	return false
}

// SetHttp2Support gets a reference to the given bool and assigns it to the Http2Support field.
func (o *CreateRedirectionHostRequest) SetHttp2Support(v bool) {
	o.Http2Support = &v
}

// GetBlockExploits returns the BlockExploits field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetBlockExploits() bool {
	if o == nil || IsNil(o.BlockExploits) {
		var ret bool
		return ret
	}
	return *o.BlockExploits
}

// GetBlockExploitsOk returns a tuple with the BlockExploits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetBlockExploitsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockExploits) {
		return nil, false
	}
	return o.BlockExploits, true
}

// HasBlockExploits returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasBlockExploits() bool {
	if o != nil && !IsNil(o.BlockExploits) {
		return true
	}

	return false
}

// SetBlockExploits gets a reference to the given bool and assigns it to the BlockExploits field.
func (o *CreateRedirectionHostRequest) SetBlockExploits(v bool) {
	o.BlockExploits = &v
}

// GetAdvancedConfig returns the AdvancedConfig field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetAdvancedConfig() string {
	if o == nil || IsNil(o.AdvancedConfig) {
		var ret string
		return ret
	}
	return *o.AdvancedConfig
}

// GetAdvancedConfigOk returns a tuple with the AdvancedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetAdvancedConfigOk() (*string, bool) {
	if o == nil || IsNil(o.AdvancedConfig) {
		return nil, false
	}
	return o.AdvancedConfig, true
}

// HasAdvancedConfig returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasAdvancedConfig() bool {
	if o != nil && !IsNil(o.AdvancedConfig) {
		return true
	}

	return false
}

// SetAdvancedConfig gets a reference to the given string and assigns it to the AdvancedConfig field.
func (o *CreateRedirectionHostRequest) SetAdvancedConfig(v string) {
	o.AdvancedConfig = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CreateRedirectionHostRequest) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRedirectionHostRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CreateRedirectionHostRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *CreateRedirectionHostRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o CreateRedirectionHostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRedirectionHostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain_names"] = o.DomainNames
	toSerialize["forward_http_code"] = o.ForwardHttpCode
	toSerialize["forward_scheme"] = o.ForwardScheme
	toSerialize["forward_domain_name"] = o.ForwardDomainName
	if !IsNil(o.PreservePath) {
		toSerialize["preserve_path"] = o.PreservePath
	}
	if !IsNil(o.CertificateId) {
		toSerialize["certificate_id"] = o.CertificateId
	}
	if !IsNil(o.SslForced) {
		toSerialize["ssl_forced"] = o.SslForced
	}
	if !IsNil(o.HstsEnabled) {
		toSerialize["hsts_enabled"] = o.HstsEnabled
	}
	if !IsNil(o.HstsSubdomains) {
		toSerialize["hsts_subdomains"] = o.HstsSubdomains
	}
	if !IsNil(o.Http2Support) {
		toSerialize["http2_support"] = o.Http2Support
	}
	if !IsNil(o.BlockExploits) {
		toSerialize["block_exploits"] = o.BlockExploits
	}
	if !IsNil(o.AdvancedConfig) {
		toSerialize["advanced_config"] = o.AdvancedConfig
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRedirectionHostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain_names",
		"forward_http_code",
		"forward_scheme",
		"forward_domain_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRedirectionHostRequest := _CreateRedirectionHostRequest{}

	err = json.Unmarshal(data, &varCreateRedirectionHostRequest)

	if err != nil {
		return err
	}

	*o = CreateRedirectionHostRequest(varCreateRedirectionHostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain_names")
		delete(additionalProperties, "forward_http_code")
		delete(additionalProperties, "forward_scheme")
		delete(additionalProperties, "forward_domain_name")
		delete(additionalProperties, "preserve_path")
		delete(additionalProperties, "certificate_id")
		delete(additionalProperties, "ssl_forced")
		delete(additionalProperties, "hsts_enabled")
		delete(additionalProperties, "hsts_subdomains")
		delete(additionalProperties, "http2_support")
		delete(additionalProperties, "block_exploits")
		delete(additionalProperties, "advanced_config")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRedirectionHostRequest struct {
	value *CreateRedirectionHostRequest
	isSet bool
}

func (v NullableCreateRedirectionHostRequest) Get() *CreateRedirectionHostRequest {
	return v.value
}

func (v *NullableCreateRedirectionHostRequest) Set(val *CreateRedirectionHostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRedirectionHostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRedirectionHostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRedirectionHostRequest(val *CreateRedirectionHostRequest) *NullableCreateRedirectionHostRequest {
	return &NullableCreateRedirectionHostRequest{value: val, isSet: true}
}

func (v NullableCreateRedirectionHostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRedirectionHostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


