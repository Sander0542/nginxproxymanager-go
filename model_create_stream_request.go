/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateStreamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateStreamRequest{}

// CreateStreamRequest struct for CreateStreamRequest
type CreateStreamRequest struct {
	IncomingPort int64 `json:"incoming_port"`
	ForwardingHost GetStreams200ResponseInnerForwardingHost `json:"forwarding_host"`
	ForwardingPort int64 `json:"forwarding_port"`
	TcpForwarding *bool `json:"tcp_forwarding,omitempty"`
	UdpForwarding *bool `json:"udp_forwarding,omitempty"`
	CertificateId *GetProxyHosts200ResponseInnerCertificateId `json:"certificate_id,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateStreamRequest CreateStreamRequest

// NewCreateStreamRequest instantiates a new CreateStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStreamRequest(incomingPort int64, forwardingHost GetStreams200ResponseInnerForwardingHost, forwardingPort int64) *CreateStreamRequest {
	this := CreateStreamRequest{}
	this.IncomingPort = incomingPort
	this.ForwardingHost = forwardingHost
	this.ForwardingPort = forwardingPort
	return &this
}

// NewCreateStreamRequestWithDefaults instantiates a new CreateStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStreamRequestWithDefaults() *CreateStreamRequest {
	this := CreateStreamRequest{}
	return &this
}

// GetIncomingPort returns the IncomingPort field value
func (o *CreateStreamRequest) GetIncomingPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.IncomingPort
}

// GetIncomingPortOk returns a tuple with the IncomingPort field value
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetIncomingPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncomingPort, true
}

// SetIncomingPort sets field value
func (o *CreateStreamRequest) SetIncomingPort(v int64) {
	o.IncomingPort = v
}

// GetForwardingHost returns the ForwardingHost field value
func (o *CreateStreamRequest) GetForwardingHost() GetStreams200ResponseInnerForwardingHost {
	if o == nil {
		var ret GetStreams200ResponseInnerForwardingHost
		return ret
	}

	return o.ForwardingHost
}

// GetForwardingHostOk returns a tuple with the ForwardingHost field value
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetForwardingHostOk() (*GetStreams200ResponseInnerForwardingHost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardingHost, true
}

// SetForwardingHost sets field value
func (o *CreateStreamRequest) SetForwardingHost(v GetStreams200ResponseInnerForwardingHost) {
	o.ForwardingHost = v
}

// GetForwardingPort returns the ForwardingPort field value
func (o *CreateStreamRequest) GetForwardingPort() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ForwardingPort
}

// GetForwardingPortOk returns a tuple with the ForwardingPort field value
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetForwardingPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForwardingPort, true
}

// SetForwardingPort sets field value
func (o *CreateStreamRequest) SetForwardingPort(v int64) {
	o.ForwardingPort = v
}

// GetTcpForwarding returns the TcpForwarding field value if set, zero value otherwise.
func (o *CreateStreamRequest) GetTcpForwarding() bool {
	if o == nil || IsNil(o.TcpForwarding) {
		var ret bool
		return ret
	}
	return *o.TcpForwarding
}

// GetTcpForwardingOk returns a tuple with the TcpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetTcpForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpForwarding) {
		return nil, false
	}
	return o.TcpForwarding, true
}

// HasTcpForwarding returns a boolean if a field has been set.
func (o *CreateStreamRequest) HasTcpForwarding() bool {
	if o != nil && !IsNil(o.TcpForwarding) {
		return true
	}

	return false
}

// SetTcpForwarding gets a reference to the given bool and assigns it to the TcpForwarding field.
func (o *CreateStreamRequest) SetTcpForwarding(v bool) {
	o.TcpForwarding = &v
}

// GetUdpForwarding returns the UdpForwarding field value if set, zero value otherwise.
func (o *CreateStreamRequest) GetUdpForwarding() bool {
	if o == nil || IsNil(o.UdpForwarding) {
		var ret bool
		return ret
	}
	return *o.UdpForwarding
}

// GetUdpForwardingOk returns a tuple with the UdpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetUdpForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.UdpForwarding) {
		return nil, false
	}
	return o.UdpForwarding, true
}

// HasUdpForwarding returns a boolean if a field has been set.
func (o *CreateStreamRequest) HasUdpForwarding() bool {
	if o != nil && !IsNil(o.UdpForwarding) {
		return true
	}

	return false
}

// SetUdpForwarding gets a reference to the given bool and assigns it to the UdpForwarding field.
func (o *CreateStreamRequest) SetUdpForwarding(v bool) {
	o.UdpForwarding = &v
}

// GetCertificateId returns the CertificateId field value if set, zero value otherwise.
func (o *CreateStreamRequest) GetCertificateId() GetProxyHosts200ResponseInnerCertificateId {
	if o == nil || IsNil(o.CertificateId) {
		var ret GetProxyHosts200ResponseInnerCertificateId
		return ret
	}
	return *o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetCertificateIdOk() (*GetProxyHosts200ResponseInnerCertificateId, bool) {
	if o == nil || IsNil(o.CertificateId) {
		return nil, false
	}
	return o.CertificateId, true
}

// HasCertificateId returns a boolean if a field has been set.
func (o *CreateStreamRequest) HasCertificateId() bool {
	if o != nil && !IsNil(o.CertificateId) {
		return true
	}

	return false
}

// SetCertificateId gets a reference to the given GetProxyHosts200ResponseInnerCertificateId and assigns it to the CertificateId field.
func (o *CreateStreamRequest) SetCertificateId(v GetProxyHosts200ResponseInnerCertificateId) {
	o.CertificateId = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *CreateStreamRequest) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStreamRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CreateStreamRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *CreateStreamRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o CreateStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateStreamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["incoming_port"] = o.IncomingPort
	toSerialize["forwarding_host"] = o.ForwardingHost
	toSerialize["forwarding_port"] = o.ForwardingPort
	if !IsNil(o.TcpForwarding) {
		toSerialize["tcp_forwarding"] = o.TcpForwarding
	}
	if !IsNil(o.UdpForwarding) {
		toSerialize["udp_forwarding"] = o.UdpForwarding
	}
	if !IsNil(o.CertificateId) {
		toSerialize["certificate_id"] = o.CertificateId
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateStreamRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"incoming_port",
		"forwarding_host",
		"forwarding_port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateStreamRequest := _CreateStreamRequest{}

	err = json.Unmarshal(data, &varCreateStreamRequest)

	if err != nil {
		return err
	}

	*o = CreateStreamRequest(varCreateStreamRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "incoming_port")
		delete(additionalProperties, "forwarding_host")
		delete(additionalProperties, "forwarding_port")
		delete(additionalProperties, "tcp_forwarding")
		delete(additionalProperties, "udp_forwarding")
		delete(additionalProperties, "certificate_id")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateStreamRequest struct {
	value *CreateStreamRequest
	isSet bool
}

func (v NullableCreateStreamRequest) Get() *CreateStreamRequest {
	return v.value
}

func (v *NullableCreateStreamRequest) Set(val *CreateStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStreamRequest(val *CreateStreamRequest) *NullableCreateStreamRequest {
	return &NullableCreateStreamRequest{value: val, isSet: true}
}

func (v NullableCreateStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


