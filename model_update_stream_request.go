/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
)

// checks if the UpdateStreamRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStreamRequest{}

// UpdateStreamRequest struct for UpdateStreamRequest
type UpdateStreamRequest struct {
	IncomingPort *int64 `json:"incoming_port,omitempty"`
	ForwardingHost *GetStreams200ResponseInnerForwardingHost `json:"forwarding_host,omitempty"`
	ForwardingPort *int64 `json:"forwarding_port,omitempty"`
	TcpForwarding *bool `json:"tcp_forwarding,omitempty"`
	UdpForwarding *bool `json:"udp_forwarding,omitempty"`
	CertificateId *GetProxyHosts200ResponseInnerCertificateId `json:"certificate_id,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateStreamRequest UpdateStreamRequest

// NewUpdateStreamRequest instantiates a new UpdateStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStreamRequest() *UpdateStreamRequest {
	this := UpdateStreamRequest{}
	return &this
}

// NewUpdateStreamRequestWithDefaults instantiates a new UpdateStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStreamRequestWithDefaults() *UpdateStreamRequest {
	this := UpdateStreamRequest{}
	return &this
}

// GetIncomingPort returns the IncomingPort field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetIncomingPort() int64 {
	if o == nil || IsNil(o.IncomingPort) {
		var ret int64
		return ret
	}
	return *o.IncomingPort
}

// GetIncomingPortOk returns a tuple with the IncomingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetIncomingPortOk() (*int64, bool) {
	if o == nil || IsNil(o.IncomingPort) {
		return nil, false
	}
	return o.IncomingPort, true
}

// HasIncomingPort returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasIncomingPort() bool {
	if o != nil && !IsNil(o.IncomingPort) {
		return true
	}

	return false
}

// SetIncomingPort gets a reference to the given int64 and assigns it to the IncomingPort field.
func (o *UpdateStreamRequest) SetIncomingPort(v int64) {
	o.IncomingPort = &v
}

// GetForwardingHost returns the ForwardingHost field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetForwardingHost() GetStreams200ResponseInnerForwardingHost {
	if o == nil || IsNil(o.ForwardingHost) {
		var ret GetStreams200ResponseInnerForwardingHost
		return ret
	}
	return *o.ForwardingHost
}

// GetForwardingHostOk returns a tuple with the ForwardingHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetForwardingHostOk() (*GetStreams200ResponseInnerForwardingHost, bool) {
	if o == nil || IsNil(o.ForwardingHost) {
		return nil, false
	}
	return o.ForwardingHost, true
}

// HasForwardingHost returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasForwardingHost() bool {
	if o != nil && !IsNil(o.ForwardingHost) {
		return true
	}

	return false
}

// SetForwardingHost gets a reference to the given GetStreams200ResponseInnerForwardingHost and assigns it to the ForwardingHost field.
func (o *UpdateStreamRequest) SetForwardingHost(v GetStreams200ResponseInnerForwardingHost) {
	o.ForwardingHost = &v
}

// GetForwardingPort returns the ForwardingPort field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetForwardingPort() int64 {
	if o == nil || IsNil(o.ForwardingPort) {
		var ret int64
		return ret
	}
	return *o.ForwardingPort
}

// GetForwardingPortOk returns a tuple with the ForwardingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetForwardingPortOk() (*int64, bool) {
	if o == nil || IsNil(o.ForwardingPort) {
		return nil, false
	}
	return o.ForwardingPort, true
}

// HasForwardingPort returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasForwardingPort() bool {
	if o != nil && !IsNil(o.ForwardingPort) {
		return true
	}

	return false
}

// SetForwardingPort gets a reference to the given int64 and assigns it to the ForwardingPort field.
func (o *UpdateStreamRequest) SetForwardingPort(v int64) {
	o.ForwardingPort = &v
}

// GetTcpForwarding returns the TcpForwarding field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetTcpForwarding() bool {
	if o == nil || IsNil(o.TcpForwarding) {
		var ret bool
		return ret
	}
	return *o.TcpForwarding
}

// GetTcpForwardingOk returns a tuple with the TcpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetTcpForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpForwarding) {
		return nil, false
	}
	return o.TcpForwarding, true
}

// HasTcpForwarding returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasTcpForwarding() bool {
	if o != nil && !IsNil(o.TcpForwarding) {
		return true
	}

	return false
}

// SetTcpForwarding gets a reference to the given bool and assigns it to the TcpForwarding field.
func (o *UpdateStreamRequest) SetTcpForwarding(v bool) {
	o.TcpForwarding = &v
}

// GetUdpForwarding returns the UdpForwarding field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetUdpForwarding() bool {
	if o == nil || IsNil(o.UdpForwarding) {
		var ret bool
		return ret
	}
	return *o.UdpForwarding
}

// GetUdpForwardingOk returns a tuple with the UdpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetUdpForwardingOk() (*bool, bool) {
	if o == nil || IsNil(o.UdpForwarding) {
		return nil, false
	}
	return o.UdpForwarding, true
}

// HasUdpForwarding returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasUdpForwarding() bool {
	if o != nil && !IsNil(o.UdpForwarding) {
		return true
	}

	return false
}

// SetUdpForwarding gets a reference to the given bool and assigns it to the UdpForwarding field.
func (o *UpdateStreamRequest) SetUdpForwarding(v bool) {
	o.UdpForwarding = &v
}

// GetCertificateId returns the CertificateId field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetCertificateId() GetProxyHosts200ResponseInnerCertificateId {
	if o == nil || IsNil(o.CertificateId) {
		var ret GetProxyHosts200ResponseInnerCertificateId
		return ret
	}
	return *o.CertificateId
}

// GetCertificateIdOk returns a tuple with the CertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetCertificateIdOk() (*GetProxyHosts200ResponseInnerCertificateId, bool) {
	if o == nil || IsNil(o.CertificateId) {
		return nil, false
	}
	return o.CertificateId, true
}

// HasCertificateId returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasCertificateId() bool {
	if o != nil && !IsNil(o.CertificateId) {
		return true
	}

	return false
}

// SetCertificateId gets a reference to the given GetProxyHosts200ResponseInnerCertificateId and assigns it to the CertificateId field.
func (o *UpdateStreamRequest) SetCertificateId(v GetProxyHosts200ResponseInnerCertificateId) {
	o.CertificateId = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *UpdateStreamRequest) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStreamRequest) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *UpdateStreamRequest) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *UpdateStreamRequest) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o UpdateStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStreamRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncomingPort) {
		toSerialize["incoming_port"] = o.IncomingPort
	}
	if !IsNil(o.ForwardingHost) {
		toSerialize["forwarding_host"] = o.ForwardingHost
	}
	if !IsNil(o.ForwardingPort) {
		toSerialize["forwarding_port"] = o.ForwardingPort
	}
	if !IsNil(o.TcpForwarding) {
		toSerialize["tcp_forwarding"] = o.TcpForwarding
	}
	if !IsNil(o.UdpForwarding) {
		toSerialize["udp_forwarding"] = o.UdpForwarding
	}
	if !IsNil(o.CertificateId) {
		toSerialize["certificate_id"] = o.CertificateId
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateStreamRequest) UnmarshalJSON(data []byte) (err error) {
	varUpdateStreamRequest := _UpdateStreamRequest{}

	err = json.Unmarshal(data, &varUpdateStreamRequest)

	if err != nil {
		return err
	}

	*o = UpdateStreamRequest(varUpdateStreamRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "incoming_port")
		delete(additionalProperties, "forwarding_host")
		delete(additionalProperties, "forwarding_port")
		delete(additionalProperties, "tcp_forwarding")
		delete(additionalProperties, "udp_forwarding")
		delete(additionalProperties, "certificate_id")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateStreamRequest struct {
	value *UpdateStreamRequest
	isSet bool
}

func (v NullableUpdateStreamRequest) Get() *UpdateStreamRequest {
	return v.value
}

func (v *NullableUpdateStreamRequest) Set(val *UpdateStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStreamRequest(val *UpdateStreamRequest) *NullableUpdateStreamRequest {
	return &NullableUpdateStreamRequest{value: val, isSet: true}
}

func (v NullableUpdateStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


