/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"fmt"
)

// checks if the GetCertificates200ResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetCertificates200ResponseInner{}

// GetCertificates200ResponseInner Certificate object
type GetCertificates200ResponseInner struct {
	// Unique identifier
	Id int64 `json:"id"`
	// Date and time of creation
	CreatedOn string `json:"created_on"`
	// Date and time of last update
	ModifiedOn string `json:"modified_on"`
	// User ID
	OwnerUserId int64 `json:"owner_user_id"`
	Provider string `json:"provider" validate:"regexp=^(letsencrypt|other)$"`
	// Nice Name for the custom certificate
	NiceName string `json:"nice_name"`
	// Domain Names separated by a comma
	DomainNames []string `json:"domain_names"`
	// Date and time of expiration
	ExpiresOn string `json:"expires_on"`
	Owner *GetAccessLists200ResponseInnerOwner `json:"owner,omitempty"`
	Meta GetCertificates200ResponseInnerMeta `json:"meta"`
	AdditionalProperties map[string]interface{}
}

type _GetCertificates200ResponseInner GetCertificates200ResponseInner

// NewGetCertificates200ResponseInner instantiates a new GetCertificates200ResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetCertificates200ResponseInner(id int64, createdOn string, modifiedOn string, ownerUserId int64, provider string, niceName string, domainNames []string, expiresOn string, meta GetCertificates200ResponseInnerMeta) *GetCertificates200ResponseInner {
	this := GetCertificates200ResponseInner{}
	this.Id = id
	this.CreatedOn = createdOn
	this.ModifiedOn = modifiedOn
	this.OwnerUserId = ownerUserId
	this.Provider = provider
	this.NiceName = niceName
	this.DomainNames = domainNames
	this.ExpiresOn = expiresOn
	this.Meta = meta
	return &this
}

// NewGetCertificates200ResponseInnerWithDefaults instantiates a new GetCertificates200ResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetCertificates200ResponseInnerWithDefaults() *GetCertificates200ResponseInner {
	this := GetCertificates200ResponseInner{}
	return &this
}

// GetId returns the Id field value
func (o *GetCertificates200ResponseInner) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GetCertificates200ResponseInner) SetId(v int64) {
	o.Id = v
}

// GetCreatedOn returns the CreatedOn field value
func (o *GetCertificates200ResponseInner) GetCreatedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetCreatedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedOn, true
}

// SetCreatedOn sets field value
func (o *GetCertificates200ResponseInner) SetCreatedOn(v string) {
	o.CreatedOn = v
}

// GetModifiedOn returns the ModifiedOn field value
func (o *GetCertificates200ResponseInner) GetModifiedOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetModifiedOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedOn, true
}

// SetModifiedOn sets field value
func (o *GetCertificates200ResponseInner) SetModifiedOn(v string) {
	o.ModifiedOn = v
}

// GetOwnerUserId returns the OwnerUserId field value
func (o *GetCertificates200ResponseInner) GetOwnerUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OwnerUserId
}

// GetOwnerUserIdOk returns a tuple with the OwnerUserId field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetOwnerUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerUserId, true
}

// SetOwnerUserId sets field value
func (o *GetCertificates200ResponseInner) SetOwnerUserId(v int64) {
	o.OwnerUserId = v
}

// GetProvider returns the Provider field value
func (o *GetCertificates200ResponseInner) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *GetCertificates200ResponseInner) SetProvider(v string) {
	o.Provider = v
}

// GetNiceName returns the NiceName field value
func (o *GetCertificates200ResponseInner) GetNiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NiceName
}

// GetNiceNameOk returns a tuple with the NiceName field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetNiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NiceName, true
}

// SetNiceName sets field value
func (o *GetCertificates200ResponseInner) SetNiceName(v string) {
	o.NiceName = v
}

// GetDomainNames returns the DomainNames field value
func (o *GetCertificates200ResponseInner) GetDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetDomainNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// SetDomainNames sets field value
func (o *GetCertificates200ResponseInner) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetExpiresOn returns the ExpiresOn field value
func (o *GetCertificates200ResponseInner) GetExpiresOn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresOn
}

// GetExpiresOnOk returns a tuple with the ExpiresOn field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetExpiresOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresOn, true
}

// SetExpiresOn sets field value
func (o *GetCertificates200ResponseInner) SetExpiresOn(v string) {
	o.ExpiresOn = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *GetCertificates200ResponseInner) GetOwner() GetAccessLists200ResponseInnerOwner {
	if o == nil || IsNil(o.Owner) {
		var ret GetAccessLists200ResponseInnerOwner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetOwnerOk() (*GetAccessLists200ResponseInnerOwner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *GetCertificates200ResponseInner) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given GetAccessLists200ResponseInnerOwner and assigns it to the Owner field.
func (o *GetCertificates200ResponseInner) SetOwner(v GetAccessLists200ResponseInnerOwner) {
	o.Owner = &v
}

// GetMeta returns the Meta field value
func (o *GetCertificates200ResponseInner) GetMeta() GetCertificates200ResponseInnerMeta {
	if o == nil {
		var ret GetCertificates200ResponseInnerMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *GetCertificates200ResponseInner) GetMetaOk() (*GetCertificates200ResponseInnerMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *GetCertificates200ResponseInner) SetMeta(v GetCertificates200ResponseInnerMeta) {
	o.Meta = v
}

func (o GetCertificates200ResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetCertificates200ResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_on"] = o.CreatedOn
	toSerialize["modified_on"] = o.ModifiedOn
	toSerialize["owner_user_id"] = o.OwnerUserId
	toSerialize["provider"] = o.Provider
	toSerialize["nice_name"] = o.NiceName
	toSerialize["domain_names"] = o.DomainNames
	toSerialize["expires_on"] = o.ExpiresOn
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["meta"] = o.Meta

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetCertificates200ResponseInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_on",
		"modified_on",
		"owner_user_id",
		"provider",
		"nice_name",
		"domain_names",
		"expires_on",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetCertificates200ResponseInner := _GetCertificates200ResponseInner{}

	err = json.Unmarshal(data, &varGetCertificates200ResponseInner)

	if err != nil {
		return err
	}

	*o = GetCertificates200ResponseInner(varGetCertificates200ResponseInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_on")
		delete(additionalProperties, "modified_on")
		delete(additionalProperties, "owner_user_id")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "nice_name")
		delete(additionalProperties, "domain_names")
		delete(additionalProperties, "expires_on")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "meta")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetCertificates200ResponseInner struct {
	value *GetCertificates200ResponseInner
	isSet bool
}

func (v NullableGetCertificates200ResponseInner) Get() *GetCertificates200ResponseInner {
	return v.value
}

func (v *NullableGetCertificates200ResponseInner) Set(val *GetCertificates200ResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCertificates200ResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCertificates200ResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCertificates200ResponseInner(val *GetCertificates200ResponseInner) *NullableGetCertificates200ResponseInner {
	return &NullableGetCertificates200ResponseInner{value: val, isSet: true}
}

func (v NullableGetCertificates200ResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCertificates200ResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


