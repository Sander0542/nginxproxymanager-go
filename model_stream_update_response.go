/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.x.x
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"time"
)

// checks if the StreamUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamUpdateResponse{}

// StreamUpdateResponse struct for StreamUpdateResponse
type StreamUpdateResponse struct {
	// Unique identifier
	Id *int64 `json:"id,omitempty"`
	// Date and time of creation
	CreatedOn *time.Time `json:"created_on,omitempty"`
	// Date and time of last update
	ModifiedOn *time.Time `json:"modified_on,omitempty"`
	IncomingPort *int64 `json:"incoming_port,omitempty"`
	ForwardingHost *PutStreamUpdateRequestForwardingHost `json:"forwarding_host,omitempty"`
	ForwardingPort *int64 `json:"forwarding_port,omitempty"`
	TcpForwarding *boolAsInt `json:"tcp_forwarding,omitempty"`
	UdpForwarding *boolAsInt `json:"udp_forwarding,omitempty"`
	// Is Enabled
	Enabled *boolAsInt `json:"enabled,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
}

// NewStreamUpdateResponse instantiates a new StreamUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamUpdateResponse() *StreamUpdateResponse {
	this := StreamUpdateResponse{}
	return &this
}

// NewStreamUpdateResponseWithDefaults instantiates a new StreamUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamUpdateResponseWithDefaults() *StreamUpdateResponse {
	this := StreamUpdateResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StreamUpdateResponse) SetId(v int64) {
	o.Id = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetCreatedOn() time.Time {
	if o == nil || IsNil(o.CreatedOn) {
		var ret time.Time
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetCreatedOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given time.Time and assigns it to the CreatedOn field.
func (o *StreamUpdateResponse) SetCreatedOn(v time.Time) {
	o.CreatedOn = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetModifiedOn() time.Time {
	if o == nil || IsNil(o.ModifiedOn) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedOn) {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasModifiedOn() bool {
	if o != nil && !IsNil(o.ModifiedOn) {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given time.Time and assigns it to the ModifiedOn field.
func (o *StreamUpdateResponse) SetModifiedOn(v time.Time) {
	o.ModifiedOn = &v
}

// GetIncomingPort returns the IncomingPort field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetIncomingPort() int64 {
	if o == nil || IsNil(o.IncomingPort) {
		var ret int64
		return ret
	}
	return *o.IncomingPort
}

// GetIncomingPortOk returns a tuple with the IncomingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetIncomingPortOk() (*int64, bool) {
	if o == nil || IsNil(o.IncomingPort) {
		return nil, false
	}
	return o.IncomingPort, true
}

// HasIncomingPort returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasIncomingPort() bool {
	if o != nil && !IsNil(o.IncomingPort) {
		return true
	}

	return false
}

// SetIncomingPort gets a reference to the given int64 and assigns it to the IncomingPort field.
func (o *StreamUpdateResponse) SetIncomingPort(v int64) {
	o.IncomingPort = &v
}

// GetForwardingHost returns the ForwardingHost field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetForwardingHost() PutStreamUpdateRequestForwardingHost {
	if o == nil || IsNil(o.ForwardingHost) {
		var ret PutStreamUpdateRequestForwardingHost
		return ret
	}
	return *o.ForwardingHost
}

// GetForwardingHostOk returns a tuple with the ForwardingHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetForwardingHostOk() (*PutStreamUpdateRequestForwardingHost, bool) {
	if o == nil || IsNil(o.ForwardingHost) {
		return nil, false
	}
	return o.ForwardingHost, true
}

// HasForwardingHost returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasForwardingHost() bool {
	if o != nil && !IsNil(o.ForwardingHost) {
		return true
	}

	return false
}

// SetForwardingHost gets a reference to the given PutStreamUpdateRequestForwardingHost and assigns it to the ForwardingHost field.
func (o *StreamUpdateResponse) SetForwardingHost(v PutStreamUpdateRequestForwardingHost) {
	o.ForwardingHost = &v
}

// GetForwardingPort returns the ForwardingPort field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetForwardingPort() int64 {
	if o == nil || IsNil(o.ForwardingPort) {
		var ret int64
		return ret
	}
	return *o.ForwardingPort
}

// GetForwardingPortOk returns a tuple with the ForwardingPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetForwardingPortOk() (*int64, bool) {
	if o == nil || IsNil(o.ForwardingPort) {
		return nil, false
	}
	return o.ForwardingPort, true
}

// HasForwardingPort returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasForwardingPort() bool {
	if o != nil && !IsNil(o.ForwardingPort) {
		return true
	}

	return false
}

// SetForwardingPort gets a reference to the given int64 and assigns it to the ForwardingPort field.
func (o *StreamUpdateResponse) SetForwardingPort(v int64) {
	o.ForwardingPort = &v
}

// GetTcpForwarding returns the TcpForwarding field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetTcpForwarding() boolAsInt {
	if o == nil || IsNil(o.TcpForwarding) {
		var ret boolAsInt
		return ret
	}
	return *o.TcpForwarding
}

// GetTcpForwardingOk returns a tuple with the TcpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetTcpForwardingOk() (*boolAsInt, bool) {
	if o == nil || IsNil(o.TcpForwarding) {
		return nil, false
	}
	return o.TcpForwarding, true
}

// HasTcpForwarding returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasTcpForwarding() bool {
	if o != nil && !IsNil(o.TcpForwarding) {
		return true
	}

	return false
}

// SetTcpForwarding gets a reference to the given boolAsInt and assigns it to the TcpForwarding field.
func (o *StreamUpdateResponse) SetTcpForwarding(v boolAsInt) {
	o.TcpForwarding = &v
}

// GetUdpForwarding returns the UdpForwarding field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetUdpForwarding() boolAsInt {
	if o == nil || IsNil(o.UdpForwarding) {
		var ret boolAsInt
		return ret
	}
	return *o.UdpForwarding
}

// GetUdpForwardingOk returns a tuple with the UdpForwarding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetUdpForwardingOk() (*boolAsInt, bool) {
	if o == nil || IsNil(o.UdpForwarding) {
		return nil, false
	}
	return o.UdpForwarding, true
}

// HasUdpForwarding returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasUdpForwarding() bool {
	if o != nil && !IsNil(o.UdpForwarding) {
		return true
	}

	return false
}

// SetUdpForwarding gets a reference to the given boolAsInt and assigns it to the UdpForwarding field.
func (o *StreamUpdateResponse) SetUdpForwarding(v boolAsInt) {
	o.UdpForwarding = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetEnabled() boolAsInt {
	if o == nil || IsNil(o.Enabled) {
		var ret boolAsInt
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetEnabledOk() (*boolAsInt, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given boolAsInt and assigns it to the Enabled field.
func (o *StreamUpdateResponse) SetEnabled(v boolAsInt) {
	o.Enabled = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *StreamUpdateResponse) GetMeta() map[string]interface{} {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StreamUpdateResponse) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *StreamUpdateResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *StreamUpdateResponse) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

func (o StreamUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["created_on"] = o.CreatedOn
	}
	if !IsNil(o.ModifiedOn) {
		toSerialize["modified_on"] = o.ModifiedOn
	}
	if !IsNil(o.IncomingPort) {
		toSerialize["incoming_port"] = o.IncomingPort
	}
	if !IsNil(o.ForwardingHost) {
		toSerialize["forwarding_host"] = o.ForwardingHost
	}
	if !IsNil(o.ForwardingPort) {
		toSerialize["forwarding_port"] = o.ForwardingPort
	}
	if !IsNil(o.TcpForwarding) {
		toSerialize["tcp_forwarding"] = o.TcpForwarding
	}
	if !IsNil(o.UdpForwarding) {
		toSerialize["udp_forwarding"] = o.UdpForwarding
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableStreamUpdateResponse struct {
	value *StreamUpdateResponse
	isSet bool
}

func (v NullableStreamUpdateResponse) Get() *StreamUpdateResponse {
	return v.value
}

func (v *NullableStreamUpdateResponse) Set(val *StreamUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamUpdateResponse(val *StreamUpdateResponse) *NullableStreamUpdateResponse {
	return &NullableStreamUpdateResponse{value: val, isSet: true}
}

func (v NullableStreamUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


