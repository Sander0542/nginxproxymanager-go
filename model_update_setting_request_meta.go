/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.12.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
)

// checks if the UpdateSettingRequestMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSettingRequestMeta{}

// UpdateSettingRequestMeta struct for UpdateSettingRequestMeta
type UpdateSettingRequestMeta struct {
	Redirect *string `json:"redirect,omitempty"`
	Html *string `json:"html,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateSettingRequestMeta UpdateSettingRequestMeta

// NewUpdateSettingRequestMeta instantiates a new UpdateSettingRequestMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSettingRequestMeta() *UpdateSettingRequestMeta {
	this := UpdateSettingRequestMeta{}
	return &this
}

// NewUpdateSettingRequestMetaWithDefaults instantiates a new UpdateSettingRequestMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSettingRequestMetaWithDefaults() *UpdateSettingRequestMeta {
	this := UpdateSettingRequestMeta{}
	return &this
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *UpdateSettingRequestMeta) GetRedirect() string {
	if o == nil || IsNil(o.Redirect) {
		var ret string
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingRequestMeta) GetRedirectOk() (*string, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *UpdateSettingRequestMeta) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given string and assigns it to the Redirect field.
func (o *UpdateSettingRequestMeta) SetRedirect(v string) {
	o.Redirect = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *UpdateSettingRequestMeta) GetHtml() string {
	if o == nil || IsNil(o.Html) {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateSettingRequestMeta) GetHtmlOk() (*string, bool) {
	if o == nil || IsNil(o.Html) {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *UpdateSettingRequestMeta) HasHtml() bool {
	if o != nil && !IsNil(o.Html) {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *UpdateSettingRequestMeta) SetHtml(v string) {
	o.Html = &v
}

func (o UpdateSettingRequestMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSettingRequestMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	if !IsNil(o.Html) {
		toSerialize["html"] = o.Html
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateSettingRequestMeta) UnmarshalJSON(data []byte) (err error) {
	varUpdateSettingRequestMeta := _UpdateSettingRequestMeta{}

	err = json.Unmarshal(data, &varUpdateSettingRequestMeta)

	if err != nil {
		return err
	}

	*o = UpdateSettingRequestMeta(varUpdateSettingRequestMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "redirect")
		delete(additionalProperties, "html")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateSettingRequestMeta struct {
	value *UpdateSettingRequestMeta
	isSet bool
}

func (v NullableUpdateSettingRequestMeta) Get() *UpdateSettingRequestMeta {
	return v.value
}

func (v *NullableUpdateSettingRequestMeta) Set(val *UpdateSettingRequestMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSettingRequestMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSettingRequestMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSettingRequestMeta(val *UpdateSettingRequestMeta) *NullableUpdateSettingRequestMeta {
	return &NullableUpdateSettingRequestMeta{value: val, isSet: true}
}

func (v NullableUpdateSettingRequestMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSettingRequestMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


