/*
Nginx Proxy Manager API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.x.x
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nginxproxymanager

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HealthResponseVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HealthResponseVersion{}

// HealthResponseVersion The version object
type HealthResponseVersion struct {
	Major int64 `json:"major"`
	Minor int64 `json:"minor"`
	Revision int64 `json:"revision"`
}

type _HealthResponseVersion HealthResponseVersion

// NewHealthResponseVersion instantiates a new HealthResponseVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthResponseVersion(major int64, minor int64, revision int64) *HealthResponseVersion {
	this := HealthResponseVersion{}
	this.Major = major
	this.Minor = minor
	this.Revision = revision
	return &this
}

// NewHealthResponseVersionWithDefaults instantiates a new HealthResponseVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthResponseVersionWithDefaults() *HealthResponseVersion {
	this := HealthResponseVersion{}
	return &this
}

// GetMajor returns the Major field value
func (o *HealthResponseVersion) GetMajor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Major
}

// GetMajorOk returns a tuple with the Major field value
// and a boolean to check if the value has been set.
func (o *HealthResponseVersion) GetMajorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Major, true
}

// SetMajor sets field value
func (o *HealthResponseVersion) SetMajor(v int64) {
	o.Major = v
}

// GetMinor returns the Minor field value
func (o *HealthResponseVersion) GetMinor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Minor
}

// GetMinorOk returns a tuple with the Minor field value
// and a boolean to check if the value has been set.
func (o *HealthResponseVersion) GetMinorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minor, true
}

// SetMinor sets field value
func (o *HealthResponseVersion) SetMinor(v int64) {
	o.Minor = v
}

// GetRevision returns the Revision field value
func (o *HealthResponseVersion) GetRevision() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *HealthResponseVersion) GetRevisionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *HealthResponseVersion) SetRevision(v int64) {
	o.Revision = v
}

func (o HealthResponseVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HealthResponseVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["major"] = o.Major
	toSerialize["minor"] = o.Minor
	toSerialize["revision"] = o.Revision
	return toSerialize, nil
}

func (o *HealthResponseVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"major",
		"minor",
		"revision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHealthResponseVersion := _HealthResponseVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHealthResponseVersion)

	if err != nil {
		return err
	}

	*o = HealthResponseVersion(varHealthResponseVersion)

	return err
}

type NullableHealthResponseVersion struct {
	value *HealthResponseVersion
	isSet bool
}

func (v NullableHealthResponseVersion) Get() *HealthResponseVersion {
	return v.value
}

func (v *NullableHealthResponseVersion) Set(val *HealthResponseVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthResponseVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthResponseVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthResponseVersion(val *HealthResponseVersion) *NullableHealthResponseVersion {
	return &NullableHealthResponseVersion{value: val, isSet: true}
}

func (v NullableHealthResponseVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthResponseVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


